////
/// @group typography
////
@forward 'variables';
@forward 'google-fonts';

@use 'sass:list';
@use 'sass:map';

@use '@react-md/utils';
@use '@react-md/theme';

@use 'variables';

/// This function is used to quickly get one of the typography's theme values. This
/// is really just for the `rmd-typography-theme` mixin to provide some validation
/// that a correct style key is used, but might be useful in other cases.
///
/// @param {String} theme-style - One of the `rmd-typography.$theme` map
/// keys to get a value for.
/// @return {Color|String|Number} one of the typography's theme values.
@function get-var-value($theme-style) {
  @return theme.helpers-get-var-value(
    $theme-style,
    variables.$theme,
    typography
  );
}

/// This function is used to get one of the typography's theme variables as a CSS
/// Variable to be applied as a style attribute. By default, the CSS Variable
/// will have a fallback of the current `rmd-typography.$theme`
///
/// This function is used to create a CSS Variable declaration with an optional
/// fallback value if the CSS Variable has not been declared somehow.
///
/// @param {String} theme-style - One of the `rmd-typography.theme` map
/// keys to set a value for.
/// @param {Color|String|Number} fallback [null] - An optional fallback color to
/// apply. This is set to `null` by default and not used since the link's theme
/// variables should always exist.
/// @return {String} one of the typography's theme values as a css variable.
@function get-var($theme-style, $fallback: null) {
  @return theme.helpers-get-var(
    $theme-style,
    variables.$theme,
    typography,
    $fallback
  );
}

/// Gets the current typography style from the `$rmd-typography-styles`
/// variable.
///
/// @example scss - Simple Examples
///
///   .test {
///     font-size: rmd-typography.value(headline-1, font-size);
///     line-height: rmd-typography.value(headline-4, line-height);
///   }
///
/// @param {String} style - One of the keys for the `$rmd-typography-styles`
/// map.
/// @param {String} property - One of the property values to extract.
/// @return {String} the typography style value.
@function value($style, $property) {
  $style-props: utils.validate($styles, $style, typography);

  @return utils.validate(
    $style-props,
    $property,
    'typography #{$style} property'
  );
}

/// Creates the styles for one of the typography's theme values. This is mostly
/// going to be an internal helper mixin util.
///
/// @param {String} property - The property to set a `rmd-typography.$theme`
/// value to.
/// @param {String} theme-style - One of the keys of `rmd-typography.$theme`
/// to extract a value from.
/// @param {Color|String|Number} fallback [null] - A fallback value to use if
/// the css variable isn't set somehow. This will default to automatically
/// retrieving the default value from the `rmd-typography.$theme` map when
/// `null`.
@mixin use-var($property, $theme-style: $property, $fallback: null) {
  @include theme.helpers-use-var(
    $property,
    $theme-style,
    variables.$theme,
    typography
  );
}

/// Updates one of the typography's theme variables with the new value for the
/// section of your app.
///
/// @param {String} theme-style - The typography theme style type to update. This
/// should be one of the `rmd-typography$.theme` keys.
/// @param {Color|String|Number} value - The new value to use.
@mixin update-var($theme-style, $value) {
  @include theme.helpers-update-var(
    $value,
    $theme-style,
    variables.$theme,
    typography
  );
}

/// Applies each property value from the `$rmd-typography-styles` map that
/// matches the style name.
///
/// @example scss - Simple Examples
///   .body-1-font-size {
///     // when no properties are provided, it will default to font-size
///     @include rmd-typography.value(body-1);
///   }
///
///   .headline-4-letter-spacing {
///     @include rmd-typography.value(headline-4, letter-spacing);
///   }
///
///   .caption-styles {
///     @include rmd-typography.value(caption, font-size, letter-spacing, line-height);
///   }
///
/// @param {String} style - The typography style to get value(s) for. This
/// should be one of the keys from the `$rmd-typography-styles` map.
/// @param {String...} properties [font-size] - A list of properties to get and
/// create. When no properties are provided, it will default to using
/// `font-size`.
@mixin value($style, $properties...) {
  @if list.length($properties) == 0 {
    $properties: list.append($properties, font-size);
  }

  @each $property in $properties {
    #{$property}: value($style, $property);
  }
}

/// Applies the base typography styles to an element.
///
/// @example scss - Example Usage SCSS
///   .custom-class-name {
///     @include rmd-typography.base-styles;
///
///     font-size: 1.3rem;
///  }
@mixin base-styles {
  @each $key, $value in variables.$base-styles {
    #{$key}: $value;
  }
}

/// Applies one of the provided material design styles to an element.
///
/// @param {String} style - One of the typography styles from
/// `$rmd-typography-styles`.
/// @param {List} omit - A list of keys to omit
@mixin styles-of($style, $omit: ()) {
  $style-props: utils.validate(variables.$styles, $style, typography);

  @each $key, $value in $style-props {
    @if not list.index($omit, $key) {
      #{$key}: $value;
    }
  }
}

/// Creates the base styles required for the text container. These styles are
/// used to be able to center the text in a container once the `max-width` value
/// has also been applied.
@mixin text-container-base {
  @include use-var(max-width, line-width);

  display: block;
  margin-left: auto;
  margin-right: auto;
  width: 100%;
}

/// This will generate the styles to apply to an element that will set the max
/// width for legibility. By default, this will create styles that change based
/// on the provided `$mobile-breakpoint` and apply different max widths on a
/// media query. This feature can be disabled by setting the
/// `$mobile-breakpoint` or the `$desktop-max-width` parameters to `null`.
///
/// Unlike everything else in react-md, the text container relies on having the
/// `box-sizing` set to `content-box` so that the text contents can be centered
/// correctly with a max width and padding. When this is set to `border-box`,
/// you will lose the padding real estate in your text container which is
/// something that might not be desired. Keeping this as `content-box` will
/// allow padding to be applied without shrinking the max line length.
///
/// @example scss - Creating a "blog"
///   .blog {
///     @include rmd-typography.text-container-base;
///     @include rmd-typography.text-container-auto;
///   }
///
///   .title {
///     @include rmd-typography.styles-of(headline-2);
///   }
///
///   .paragraph {
///     @include rmd-typography.styles-of(headline-4);
///
///     @media (max-width: 800px) {
///       @include rmd-typography.styles-of(headline-5);
///     }
///   }
///
/// @example html - Creating a "blog"
///    <main class="blog">
///      <h1 class="title">Blog Title</h1>
///      <p class="paragraph">Lorem ipsum...</p>
///      <p class="paragraph">Lorem ipsum...</p>
///    </main>
///
///
/// @param {Number} mobile-max-width [$rmd-typography-mobile-max-line-length] -
/// The max width for a line of text on mobile devices. This number is
/// recommended to be between 17em and 18em.
/// @param {Number} desktop-max-width [$rmd-typography-desktop-max-line-length] -
/// The max width for a line of text on desktop screens. This number is
/// recommended to be between 38em and 42em.
/// @param {Number} mobile-breakpoint [$rmd-typography-text-container-breakpoint]
/// - The breakpoint for switching between a mobile device and a desktop screen.
/// This is used to automatically change the max line-width for better
/// legibility.
@mixin text-container-auto(
  $mobile-max-width: variables.$mobile-max-line-length,
  $desktop-max-width: variables.$desktop-max-line-length,
  $mobile-breakpoint: variables.$text-container-breakpoint
) {
  @media (max-width: #{$mobile-breakpoint}) {
    @include update-var(line-width, get-var(mobile-line-width));
  }
}

/// Creates all the styles for the text container component.
///
/// @access private
@mixin text-container {
  @include text-container-base;

  &--auto {
    @include text-container-auto;
  }

  &--mobile {
    @include update-var(line-width, get-var(mobile-line-width));
  }

  &--desktop {
    @include update-var(line-width, get-var(desktop-line-width));
  }
}

/// A simple mixin that can be used to update an element to ellipsis text when
/// it is too long.
///
/// @example scss - Example Usage
///   .truncate-this {
///     @include overflow-ellipsis;
///
///     width: 5rem;
///   }
@mixin overflow-ellipsis {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

/// A simple mixin that allows you to use the `-webkit-box` behavior for
/// overflowing text that spans multiple lines
///
/// @link https://caniuse.com/#search=line-clamp
/// @param {String|Number} lines [2] - The number of lines that the text should be
/// clamped to.
@mixin line-clamp($lines: 2) {
  -webkit-box-orient: vertical;
  -webkit-line-clamp: $lines;
  display: -webkit-box;
}

/// Creates all the typography styles from the react-md typography variables.
@mixin styles {
  @include theme.helpers-create-root-theme(variables.$theme, typography);

  .rmd-typography {
    @include base-styles;

    @each $suffix in map.keys(variables.$styles) {
      &--#{$suffix} {
        @include styles-of($suffix);
      }
    }

    @each $weight in variables.$default-font-weights {
      &--#{$weight} {
        font-weight: map.get(variables.$font-weights, $weight);
      }
    }

    @each $font-style in variables.$font-styles {
      &--#{$font-style} {
        font-style: $font-style;
      }
    }

    @each $suffix, $theme-style in variables.$colors {
      &--#{$suffix} {
        @include theme.use-var(color, $theme-style);
      }
    }

    @each $align in variables.$alignments {
      &--#{$align} {
        text-align: $align;
      }
    }

    @each $decoration in variables.$decorations {
      $suffix: $decoration +
        if($decoration == overline, 'overline-decoration', '');

      &--#{$suffix} {
        text-decoration: $decoration;
      }
    }

    @each $transform in variables.$transforms {
      &--#{$transform} {
        text-transform: $transform;
      }
    }

    &--no-margin {
      margin: 0;
    }

    &--no-margin-top {
      margin-top: 0;
    }

    &--no-margin-bottom {
      margin-bottom: 0;
    }
  }

  .rmd-text-container {
    @include text-container;
  }

  .rmd-sr-only {
    @include utils.sr-only(true);
  }
}
