////
/// @group utils
////

@use "sass:list";
@use "sass:map";
@use "sass:meta";
@use "sass:string";

/// Boolean if scroll momentum should be added by default for iOS. This _can_
/// probably be removed one day when iOS natively supports scroll momentum on
/// anything except the main document.
/// @type Boolean
$ios-scroll-momentum: true !default;

/// Boolean if the dense spec should automatically be applied based on media
/// queries once the app has reached a "desktop" size.
///
/// @type Boolean
$auto-dense: false !default;

/// Boolean if the rtl fixes should be included by default. You can save a few
/// bytes in your bundle size by disabling this if you don't need to worry about
/// right-to-left languages in your app.
///
/// @type Boolean
$enable-rtl: true !default;

/// The default z-index to use for temporary elements like dialogs and menus. It
/// is recommended to keep all of these the same since it makes portalling work
/// much better. If the z-indexes are different, you might need to update the
/// portal container to be a parent temporary element instead.
///
/// @type Number
$temporary-element-z-index: 30 !default;

/// A list of the supported swappable variables for `swap-position`.
/// @type List
$swappable-positions: top right bottom left;

/// A list of the supported swappable variables prefixes for
/// `swap-position`.
/// @type List
$swappable-position-prefixes: border margin padding;

/// Boolean if the validation for valid themes and other things should occur. It
/// is recommended to keep this enabled, but you might see a build speed perf by
/// setting this to true.
/// @type Boolean
$skip-validation: false !default;

/// Boolean if the moz focusring and inner-focus styles should be removed for
/// the `hide-focus-outline` mixin by default. This is generally
/// recommended since custom focus styles will be added instead.
/// @type Boolean
$fix-moz-focus: true !default;

/// The max width for a phone when in portrait or landscape mode.
/// @type Number
$phone-max-width: 47.9375em !default;

/// The min width for a tablet in portrait or landscape mode.
/// @type Number
$tablet-min-width: 48em !default;

/// The max width for a tablet in portrait or landscape mode.
/// @type Number
$tablet-max-width: 64em !default;

/// The min width for a desktop screen.
/// @type Number
$desktop-min-width: 64.0625em !default;

/// The min width for a large desktop screen.
/// @type Number
$large-desktop-min-width: 80em !default;

/// The css variable that is used to track how many columns there are within the
/// `Grid` component.
/// @type String
$grid-columns-var: --rmd-grid-cols;

/// The css variable that is used to apply a gutter between each cell in the
/// `Grid` component.
/// @type String
$grid-gutter-var: --rmd-grid-gutter;

/// The css variable that is used to apply margin to cells within the grid
/// components.
/// @type String
$grid-cell-margin-var: --rmd-cell-margin;

/// The css variable that is used to apply size to cells within the `GridList`
/// component.
/// @type String
$grid-cell-size-var: --rmd-cell-size;

/// The default amount of padding to apply to the `Grid` component. This is a
/// bit different than the flex grid since the cells within this grid will not
/// have outer margin.
/// @type Number
$grid-padding: 1rem !default;

/// The default amount of margin to apply between each cell within the `Grid`
/// component.
/// @type Number
$grid-cell-margin: 1rem !default;

/// The material design grid system is a bit weird and does a 4 -> 8 -> 12
/// column layout for phone -> tablet -> desktop. This is really nice when your
/// grid only uses even numbers, but the second you add an odd number in there,
/// it breaks down and becomes confusing.
///
/// This variable is a quick way to opt-out of this grid system and have a
/// static number of columns for each media type.
/// @type Number
$grid-columns: null !default;

/// The default number of columns to render on mobile devices in the `Grid`
/// component.
/// @type Number
$grid-phone-columns: if($grid-columns, $grid-columns, 4) !default;

/// The default number of columns to render on tablet devices in the `Grid`
/// component.
/// @type Number
$grid-tablet-columns: if($grid-columns, $grid-columns, 8) !default;

/// The default number of columns to render on desktop screens in the `Grid`
/// component.
/// @type Number
$grid-desktop-columns: if($grid-columns, $grid-columns, 12) !default;

/// The default number of columns to render on large desktop screens in the
/// `Grid` component.
/// @type Number
$grid-large-desktop-columns: $grid-desktop-columns !default;

/// The default amount of padding to apply to the `GridList` component.
/// @type Number
$grid-list-padding: 0.5rem !default;

/// The default amount of margin to apply to each cell within the `GridList`
/// component.
/// @type Number
$grid-list-cell-margin: 0.5rem !default;

/// The default max size that each cell can be within the `GridList` component.
/// @type Number
$grid-list-cell-max-size: 9.375rem !default;

/// Replace `$search` with `$replace` in `$string`
///
/// @author Hugo Giraudel
/// @access private
/// @param {String} string - Initial string
/// @param {String} search - Substring to replace
/// @param {String} replace - New value
/// @return {String} - Updated string
/// @link https://css-tricks.com/snippets/sass/str-replace-function Source from CSS Tricks
@function str-replace($string, $search, $replace) {
  $index: string.index($string, $search);

  @if $index {
    @return string.slice($string, 1, $index - 1) + $replace +
      str-replace(
        string.slice($string, $index + string.length($search)),
        $search,
        $replace
      );
  }

  @return $string;
}

/// This function is used to validate a list or map to make sure they contain
/// the provided key or value. This should mostly really only be internal use.
///
/// @access private
/// @param {List|Map} list-or-map - The list or map to validate
/// @param {Color|String|Number} key-or-value - Either the value to check for in
/// a list or a Map's key.
/// @param {String} error-message - The prop name that was being used for the
/// validation. This is mostly for a more helpful error message when a
/// developer/user provided the wrong input.
/// @return {String|Null} - Either the map's value for the provided key or the
/// provided value for a list when there is no error.
@function validate($list-or-map, $key-or-value, $error-message) {
  $type: meta.type-of($list-or-map);
  $is-map: $type == map;
  $is-list: $type == list;

  @if $skip-validation {
    @return if($is-list, $key-or-value, map.get($list-or-map, $key-or-value));
  }

  @if not $is-map and not $is-list {
    @error 'Unable to validate anything except for lists and maps at this time. Received: #{$list-or-map}.';
  }

  $choices: if($is-map, map.keys($list-or-map), $list-or-map);
  @if not list.index($choices, $key-or-value) {
    @error "Invalid #{$error-message}: '#{$key-or-value}'. Choose one of: #{$choices}";
  }

  @return if($is-list, $key-or-value, map.get($list-or-map, $key-or-value));
}

/// A utility function that can swap the position of different css styles. This
/// is useful for RTL switching.
/// @param {String} style - The style to swap. This should be one of
/// `$swappable-positions`.
/// @return {String} a swapped style attribute string.
@function swap-position($style) {
  $prefix: '';
  $position: $style;
  @each $valid-prefix in $swappable-position-prefixes {
    @if string.index($style, '#{$valid-prefix}-') {
      $prefix: '#{$valid-prefix}-';
      $position: str-replace($style, $prefix, '');
    }
  }

  $current: validate($swappable-positions, $position, 'swappable position');

  $next-position: bottom;
  @if $position == left {
    $next-position: right;
  } @else if $position == right {
    $next-position: left;
  } @else if $position == bottom {
    $next-position: top;
  }

  @return '#{$prefix}#{$next-position}';
}

/// This function can be used to negate the value of a css variable. It just
/// really wraps the variable with `calc(-1 * #{$variable})`.
///
/// @param {String} css-variable - The css variable string to negate.
/// @return {String} a calc string that negates a css variable.
@function negate-var($css-variable) {
  @return calc(-1 * #{$css-variable});
}

/// This is a simple mixin that will create styles from a Map of properties with
/// values.
///
/// @param {Map} style-map - The map of styles that should be applied. If this
/// is `null`, no styles will be generated.
@mixin map-to-styles($style-map) {
  @if $style-map {
    @each $property, $value in $style-map {
      #{$property}: #{$value};
    }
  }
}

/// A simple mixin that allows you to update styles when the [dir="rtl"] is
/// present for languages that read right to light. This is mostly used to
/// update spacing with margins or padding and a more "verbose" method of
/// declaring rtl styles.
///
/// @example scss - Example Usage SCSS
///   .my-class {
///     margin-right: 1rem;
///
///     @include rtl {
///       margin-left: 1rem;
///       margin-right: auto;
///     }
///   }
///
@mixin rtl {
  @if $enable-rtl {
    [dir='rtl'] & {
      @content;
    }
  }
}

/// This mixin will try to automatically swap the positioning styles for rtl
/// languages.  If the swapped style should have something other than `auto` as
/// the new style, that style should be included in the `$swapped-styles` map
/// with the correct value.
///
/// @param {String} property - The property that should be reversed for rtl
/// languages.
/// @param {String|Number} value - The value that should be used for the
/// original property value or the inversed property value when in rtl mode.
/// @param {String|Number} swapped-value [null] - The value to use when in rtl
/// languages for the original property. When this is set to `null`, `0` will be
/// used for margins and padding while `auto` for everything else.
@mixin rtl-auto($property, $value, $swapped-value: null) {
  $inversed-property: swap-position($property);

  @include rtl {
    @if $swapped-value == null {
      $swapped-value: auto;

      @each $prefix in $swappable-position-prefixes {
        @if string.index($property, '#{$prefix}-') {
          $swapped-value: 0;
        }
      }
    }

    #{$property}: #{$swapped-value};
    #{$inversed-property}: #{$value};
    @content;
  }

  #{$property}: #{$value};
}

/// This mixin will try to automatically swap the positioning styles for rtl
/// languages.  If the swapped style should have something other than `auto` as
/// the new style, that style should be included in the `$swapped-styles` map
/// with the correct value.
///
/// @param {Map} styles - The styles that should be swapped for rtl languages.
/// Right now react-md only supports the `$swappable-positions`.
/// @param {Map} swapped-styles [()] - Any optional swapped style overrides that
/// should be applied.
@mixin rtl-auto-group($styles, $swapped-styles: ()) {
  @include map-to-styles($styles);
  @include rtl {
    @each $property, $value in $styles {
      $inversed-property: swap-position($property);
      $inversed-value: auto;
      @if map.has-key($swapped-styles, $property) {
        $inversed-value: map.get($swapped-styles, $property);
      } @else if map.has-key($styles, $inversed-property) {
        $inversed-value: map.get($swapped-styles, $inversed-property);
      }

      #{$property}: #{$inversed-value};
      #{$inversed-property}: #{$value};

      @content;
    }
  }
}

/// A very simple mixin that will center an element within the page for you when
/// you aren't using flexbox or grid for the part of the layout.
@mixin block-centered($vertical-margin: null) {
  display: block;

  @if $vertical-margin {
    margin: $vertical-margin auto;
  } @else {
    margin-left: auto;
    margin-right: auto;
  }
}

/// A very simple mixin that is used to position an element in the center of
/// another element by using some transforms and `position: absolute`. You will
/// need to make sure that the parent element has `position: relative` to work.
@mixin absolute-centered {
  left: 50%;
  position: absolute;
  top: 50%;
  transform: translateX(-50%) translateY(-50%);
}

/// An extremely simple util that is used to add scrolling to an element with a
/// "patch" for adding scroll momentum to iOS.
///
/// @param {String} position [null] - This should either be "x", "y", or null.
/// This will just change the style between overflow, overflow-x, and
/// overflow-y.
/// @param {String} type [auto] - The scroll type to apply. It is recommended to
/// use the default of `auto` in most cases, but it can be set to something
/// else.
/// @param {Boolean} enable-momentum [$ios-scroll-momentum] - Boolean
/// if iOS scroll momentum should be "patched".
@mixin scroll(
  $position: null,
  $type: auto,
  $enable-momentum: $ios-scroll-momentum
) {
  $style: overflow;
  @if $position == 'x' or $position == 'y' {
    $style: #{$style}-#{$position};
  }

  #{$style}: $type;

  @if $enable-momentum {
    // sass-lint:disable no-vendor-prefixes
    -webkit-overflow-scrolling: touch;
  }
}

/// A helper mixin that will hide the outline style when a user focuses any
/// element / on the page. All this really does is create an `outline-style:
/// none` when the element is focused.
///
/// @param {Boolean} fix-moz-focus [$fox-moz-focus] - Boolean if the
/// Firefox focus inner styles should also be removed.
@mixin hide-focus-outline($fix-moz-focus: $fix-moz-focus) {
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);

  &:focus {
    outline-style: none;
  }

  @if $fix-moz-focus {
    &::-moz-focus-inner {
      border: 0;
    }
  }
}

/// An extremely simple mixin that will allow any element to be fixed to the
/// entire viewport size.
/// @param {String} position [fixed] - The positioning that should be applied.
/// This should be one of the values for the `position` attribute.
@mixin full-screen($position: fixed) {
  bottom: 0;
  left: 0;
  position: $position;
  right: 0;
  top: 0;
}

/// Creates the styles to apply to a pseudo element (`::before` or `::after`) so
/// that it spans the entire size of the container element. This is really
/// useful for focus effects or other interaction states. This relies on the
/// parent to have `position: relative;` to work.
///
/// @param {Number} z-index [0] - The z-index to use.
/// @param {String} position [absolute] - CSS position to apply to the pseudo
/// element. This should normally be `absolute` or `fixed`
@mixin pseudo-element($z-index: 0, $position: absolute) {
  @include full-screen($position);

  border-radius: inherit;
  content: '';
  pointer-events: none;
  z-index: $z-index;
}

/// Creates styles to make a screenreader only class visible while focused.
/// @link https://gist.github.com/ffoodd/000b59f431e3e64e4ce1a24d5bb36034
/// @access private
@mixin sr-only-focusable {
  &:active,
  &:focus {
    clip: auto;
    clip-path: none;
    height: auto;
    margin: auto;
    overflow: visible;
    white-space: normal;
    width: auto;
  }
}

/// Creates styles so that an element is visible only for screen readers.
///
/// @link https://gist.github.com/ffoodd/000b59f431e3e64e4ce1a24d5bb36034
/// @param {Boolean} focusable [false] - Boolean if the element should still be
/// focusable and then be visible when focused.
/// @param {String} focus-suffix ['&--focusable'] - The suffix to use for an
/// element that can be focusable. This will be used alongside `&:active` and
/// `&:focus`. If this value is set to `null`, no prefix will be provided and
/// just the `&:active` and `&:focus` selectors will be used instead. These
/// styles will only be generated if the `focusable` parameter is `true`.
@mixin sr-only($focusable: false, $focus-suffix: '&--focusable') {
  border: 0;
  clip: rect(1px, 1px, 1px, 1px);
  clip-path: inset(50%);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  white-space: nowrap;
  width: 1px;

  @if $focusable {
    @if not $focus-suffix {
      @include sr-only-focusable;
    } @else {
      #{$focus-suffix} {
        @include sr-only-focusable;
      }
    }
  }
}

/// This mixin will hide the scrollbar for an element but still allow scrolling
/// by using the scrollbar-width property along with the -webkit-scrollbar
/// pseudo selector.  If on a non-MacOS and the horizontal scrollbars were
/// hidden, the user can still scroll by holding shift while scrolling.
///
/// Note: This only works due to the limited browser support of this library. If
/// you need to support older browsers, don't use this.
/// @link https://caniuse.com/#feat=css-scrollbar
@mixin hide-scrollbar {
  scrollbar-width: none;

  &::-webkit-scrollbar {
    height: 0;
    width: 0;
  }
}

/// Creates a media query so that only phones will be targeted with the styles.
/// This media query **will stop** at the phone's max width instead of being a
/// `min-width` query since it would be better to just apply the phone styles as
/// a base and use the tablet or desktop min-width queries for additional
/// overrides.
@mixin phone-media {
  @media screen and (max-width: #{$phone-max-width}) {
    @content;
  }
}

/// Creates a media query so devices targeted at the min-width of a tablet and
/// above will gain these styles.
@mixin tablet-media {
  @media screen and (min-width: #{$tablet-min-width}) {
    @content;
  }
}

/// Creates a media query so that screen sizes between the min and max width of
/// a tablet will only gain these styles.
@mixin tablet-only-media {
  @media screen and (min-width: #{$tablet-min-width}) and (max-width: #{$tablet-max-width}) {
    @content;
  }
}

/// Creates a media query so that screen sizes matching at least the min width
/// for a desktop will gain these styles.
@mixin desktop-media {
  @media screen and (min-width: #{$desktop-min-width}) {
    @content;
  }
}

/// Creates a media query so that screen sizes matching at least the min width
/// for a large desktop will gain these styles.
@mixin large-desktop-media {
  @media screen and (min-width: #{$large-desktop-min-width}) {
    @content;
  }
}

/// This mixin should mostally be used internally within react-md so that
/// react-md mixins that use a `rmd-` prefixed class work correctly if included
/// from a css module file. This basically prefixes the react-md class with
/// `:global` and suffixes with `:local &`.
///
/// @since 2.1.0
/// @param {String} class-name - The class name that should be optionally
/// prefixed with `:global` when the `$css-modules` parameter is `true`.
/// @param {Boolean} css-modules [false] - Boolean if the class name should be
/// updated to be used with css modules.
/// @param {Boolean} parent-selector [true] - Boolean if the selector should end
/// with the parent selector ` & ` so that the `$class-name` is a parent of the
/// current class.
@mixin optional-css-modules(
  $class-name,
  $css-modules: false,
  $parent-selector: true
) {
  $selector: if($css-modules, ':global #{$class-name} :local', $class-name);
  $selector: if($parent-selector, '#{$selector} &', $selector);

  #{$selector} {
    @content;
  }
}

/// This mixin allows you to add styles to an element only when the user is
/// interacting with your app on a touch device.
///
/// @example scss - Normal Usage
///   .my-class-name {
///     @include touch-only {
///       &:hover {
///         background-color: transparent;
///       }
///     }
///   }
///
/// @example scss - CSS Modules Usage
///   .container {
///     @include touch-only(true) {
///       &:hover {
///         background-color: transparent;
///       }
///     }
///   }
///
/// @param {Boolean} css-modules [false] - Boolean if this is being used within
/// CSS Modules which will update the selector to work correctly by wrapping
/// different parts with `:global` and `:local`.
@mixin touch-only($css-modules: false) {
  @include optional-css-modules('.rmd-utils--touch', $css-modules) {
    @content;
  }
}

/// This mixin allows you to add styles to an element only when the user is
/// interacting with your app with a keyboard.
///
/// @example scss - Normal Usage
///   .my-class-name {
///     @include keyboard-only {
///       &:focus {
///         box-shadow: inset 0 0 0 1px blue;
///       }
///     }
///   }
///
/// @example scss - CSS Modules Usage
///   .container {
///     @include keyboard-only(true) {
///       &:focus {
///         box-shadow: inset 0 0 0 1px blue;
///       }
///     }
///   }
///
/// @param {Boolean} css-modules [false] - Boolean if this is being used within
/// CSS Modules which will update the selector to work correctly by wrapping
/// different parts with `:global` and `:local`.
@mixin keyboard-only($css-modules: false) {
  @include optional-css-modules('.rmd-utils--keyboard', $css-modules) {
    @content;
  }
}

/// This mixin allows you to add styles to an element only when the user is
/// interacting with your app with a mouse.
///
/// @example scss - Normal Usage
///   .my-class-name {
///     @include mouse-only {
///       &:hover {
///         background-color: yellow;
///       }
///     }
///   }
///
/// @example scss - CSS Modules Usage
///   .container {
///     @include mouse-only(true) {
///       &:hover {
///         background-color: yellow;
///       }
///     }
///   }
///
/// @param {Boolean} css-modules [false] - Boolean if this is being used within
/// CSS Modules which will update the selector to work correctly by wrapping
/// different parts with `:global` and `:local`.
@mixin mouse-only($css-modules: false) {
  @include optional-css-modules('.rmd-utils--mouse', $css-modules) {
    @content;
  }
}

/// Generates a new grid based on the provided padding, margin, and columns.
///
/// @param {Number} padding [$grid-padding] - The amount of padding to apply
/// to the base grid element.
/// @param {Number} gutter [$grid-cell-margin] - The amount of margin to
/// apply between each cell within the grid. Unlike flex grids, this will only
/// be applied between cells instead of to the `top`, `right`, `bottom`, and
/// `left` of each cell so this should _normally_ be doubled compared to the
/// flex grids.
/// @param {Number} phone-columns [$grid-phone-columns] - The number of
/// columns that should appear per-row on phones.
/// @param {Number} tablet-columns [$grid-tablet-columns] - The number of
/// columns that should appear per-row on tablets. If this is not greater than
/// the `$phone-columns` parameter, it will not be used.
/// @param {Number} desktop-columns [$grid-desktop-columns] - The number of
/// columns that should appear per-row on desktop screens. If this is not
/// greater than the `$tablet-columns` parameter, it will not be used.
/// @param {Number} large-desktop-columns [$grid-large-desktop-columns] - The
/// number of columns that should appear per-row on large desktop screens. If
/// this is not greater than the `$tablet-columns` parameter, it will not be
/// used.
@mixin grid(
  $padding: $grid-padding,
  $gutter: $grid-cell-margin,
  $phone-columns: $grid-phone-columns,
  $tablet-columns: $grid-tablet-columns,
  $desktop-columns: $grid-desktop-columns,
  $large-desktop-columns: $grid-large-desktop-columns
) {
  @if $tablet-columns > $phone-columns {
    @include tablet-media {
      #{$grid-columns-var}: #{$tablet-columns};
    }
  }

  @if $desktop-columns > $tablet-columns {
    @include desktop-media {
      #{$grid-columns-var}: #{$desktop-columns};
    }
  }

  @if $large-desktop-columns > $desktop-columns {
    @include large-desktop-media {
      #{$grid-columns-var}: #{$large-desktop-columns};
    }
  }

  display: grid;
  grid-column-gap: var(#{$grid-gutter-var}, #{$gutter});
  grid-row-gap: var(#{$grid-gutter-var}, #{$gutter});
  grid-template-columns: repeat(
    var(#{$grid-columns-var}, #{$phone-columns}),
    1fr
  );
  padding: $padding;

  > * {
    // this allows the children to shrink if needed so that they don't overflow
    // the entire grid
    min-width: 0;
  }
}

/// This mixin is just a nice way to quickly make a cell span the entire width
/// of the grid.
///
/// Note: if you set the number of columns for phone or tablet to `1`, you'll
/// need to also wrap this in the `@include tablet-media` or `@include
/// desktop-media` mixins respectively.
@mixin grid-cell-full {
  grid-column: 1 / span var(#{$grid-columns-var}, $grid-phone-columns);
}

/// A mixin that allows you to override the size of a cell within the `Grid`
/// component manually.  This is useful if you want to specify sizing without
/// using the `GridCell` component wrapper.
///
/// @param {Number} size - The number of columns the element should span. This
/// should normally be a number greater than 1 since using 1 is the default cell
/// size.
/// @param {Number} phone-columns [$grid-phone-columns] - The number of
/// columns that should appear per-row on phones.
/// @param {Number} tablet-columns [$grid-tablet-columns] - The number of
/// columns that should appear per-row on tablets. If this is not greater than
/// the `$phone-columns` parameter, it will not be used.
/// @param {Number} desktop-columns [$grid-desktop-columns] - The number of
/// columns that should appear per-row on desktop screens. If this is not
/// greater than the `$tablet-columns` parameter, it will not be used.
@mixin grid-cell-size(
  $size,
  $phone-columns: $grid-phone-columns,
  $tablet-columns: $grid-tablet-columns,
  $desktop-columns: $grid-desktop-columns
) {
  @if $size >= $desktop-columns {
    @include desktop-media {
      // I'll need to make a desktop-only media if people actually define more columns for
      // large desktops
      @include grid-cell-full;
    }
  }

  @if $size >= $tablet-columns {
    @include tablet-only-media {
      @include grid-cell-full;
    }
  }

  @if $size >= $phone-columns {
    @include phone-media {
      @include grid-cell-full;
    }
  }

  grid-column-end: span $size;
}

/// Creates the styles for all the cell column spans and "fixes" for smaller
/// media types if the media types doesn't support the same number of columns.
/// @access private
@mixin grid-cell {
  @for $i from 2 through $grid-large-desktop-columns {
    &--#{$i} {
      @include grid-cell-size($i);
    }
  }
}

/// A simple mixin that will allow you to add the current grid list cell size to
/// any property.
///
/// @param {String} property - The css property to apply the size to.
/// @param {Number} max-size [$grid-list-cell-max-size] - The max size that
/// each cell can be. This is really just a fallback value if the
/// `--cell-size` hasn't been defined yet by the `GridList` component.
/// @param {Number} margin [$grid-list-cell-margin] - The amount of margin
/// that should be placed between each cell. This will be used with the current
/// `--cell-size` to calculate the correct height and width. This value
/// **will be multiplied by 2 in the calculation**.
@mixin grid-list-cell-size(
  $property,
  $max-size: $grid-list-cell-max-size,
  $margin: $grid-list-cell-margin
) {
  $size: var(#{$grid-cell-size-var}, #{$max-size});
  @if $margin and $margin > 0 {
    $size: calc(#{$size} - calc(var(#{$grid-cell-margin-var}, #{$margin}) * 2));
  }

  #{$property}: $size;
}

/// Adds the current grid list cell's size to any element if you don't want to
/// use the `GridListCell` component for sizing. This will **always** apply the
/// `margin` and `width`, but the `height` can be opted-out if desired.
///
/// @param {Number} margin [$grid-list-cell-margin] - The amount of margin to
/// apply to each cell for top, right, bottom and left.
/// @param {Number} max-size [$grid-list-cell-max-size] - The max size that
/// each cell can be. This is really just a fallback if the `GridList` component
/// hasn't set the `--cell-size` variable yet.
/// @param {Boolean} include-height [true] - Boolean if the cell's height should
/// be restricted to the current cell size as well so it can be perfectly
/// square.
@mixin grid-list-cell(
  $margin: $grid-list-cell-margin,
  $max-size: $grid-list-cell-max-size,
  $include-height: true
) {
  @if $include-height {
    @include grid-list-cell-size(height, $max-size, $margin);
  }
  @include grid-list-cell-size(width, $max-size, $margin);

  margin: var(#{$grid-cell-margin-var}, #{$margin});
}

/// Creates the styles for the `GridList` component
/// @access private
@mixin grid-list($padding: $grid-list-padding, $margin: 0 auto) {
  align-items: flex-start;
  display: flex;
  flex-flow: row wrap;
  margin: $margin;
  padding: $padding;
}

/// Generates all the styles for the grid systems in react-md.
/// @access private
@mixin grid-styles {
  .rmd-grid {
    @include grid;

    &--no-padding {
      padding: 0;
    }

    &__cell {
      @include grid-cell;
    }
  }

  .rmd-grid-list {
    @include grid-list;

    &__cell {
      @include grid-list-cell($include-height: false);

      &--square {
        @include grid-list-cell-size(height);
      }
    }
  }
}

/// A simple CSS reset that is included automatically with the `styles` mixin.
@mixin reset {
  *,
  *::before,
  *::after {
    // setting everything to border-box for easier positioning
    // and calculations
    box-sizing: border-box;
  }

  html,
  body {
    height: 100%;
    margin: 0;
    padding: 0;
  }

  // this is required since this _should_ be the default behavior, but if you've
  // manually set a `display` value on an element, it will override this
  // behavior.
  [hidden] {
    // sass-lint:disable-block no-important
    display: none !important;
  }
}

/// Generates the styles for the `@react-md/utils` package.
@mixin styles {
  @include reset;
  @include grid-styles;

  body {
    &.rmd-utils--touch {
      -webkit-tap-highlight-color: rgba(0, 0, 0, 0);

      // this allows for click events to be bubbleable on iOS to the root document. Without this,
      // all the `onOutsideClick` behavior won't work.
      cursor: pointer;
    }
  }
}
